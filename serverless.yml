service: serverless
frameworkVersion: "3"
useDotenv: true

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3003
    noPrependStageInUrl: dev

resources:
  Resources:
    TodosDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

provider:
  stage: dev
  region: ap-southeast-2
  name: aws
  runtime: nodejs16.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - "x-handsome"
        - "content-type"
      allowCredentials: true

functions:
  helloHandler:
    handler: src/lambda/hello/app.handler
    events:
      - http:
          path: /api/hello
          method: get
  saveHandler:
    handler: src/lambda/table/create.handler
    events:
      - http:
          path: /api/table
          method: post
  readHandler:
    handler: src/lambda/table/read.handler
    events:
      - http:
          path: /api/table
          method: get
